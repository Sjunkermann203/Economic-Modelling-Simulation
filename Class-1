import random

class Point:
    #all classes need to have an init method
    def __init__(self, x, y):
        """
        Init method that initializes the point with X and Y
        :param x: X coordinate value
        :param y: Y coordinate value
        """
        self.x = x
        self.y = y
    def __str__(self):
        """
        How to print this point?
        :return:
        """
        return f"<x={self.x}, y={self.y}>"
    def __repr__(self):
        """
        How to print if in a list?
        :return:
        """
        return self.__str__()
    def distance_orig(self):
        """
        Return the distance from the origin of the point instance
        :return:
        """
        return ((self.x**2 + self.y**2)**0.5)
    def __gt__(self, other):
        """
        How to compare 2 points? We define it here!
        :param other:
        :return:
        """
        my_size= self.distance_orig()
        their_size = other.distance_orig()
        return my_size> their_size

a = Point(2,3) #Instantiate by calling the name of the class and parameters in brackets
b = Point(7,9)
print(a.x, a.y)
print(b.x, b.y)

#Add 5 random points into a list
points = []
for i in range(5):
    x = random.randint(0,100)
    y =  random.randint(0,100)
    points.append(Point(x,y))

for _ in range(5):
    points.append(Point(random.randint(0,100), random.randint(0,100)))

for point in points:
    print(point)
a = Point(3,4) # We expect 5 to be returned based on the parameters
b = Point(12, 5) # We expect 13 to be returned based on the parameters

print(a.distance_orig(), b.distance_orig())
print(a>b)
# a > b this is the magic, this translates to: a.__gt__(b)
points.sort()
print(f"The biggest point is {points[-1]} and the smallest point is: {points[0]}")
